import os
import sys
import requests
from PyQt6.QtCore import QSize, QPoint
from PyQt6.QtWidgets import (
    QMainWindow, QPushButton, QVBoxLayout, QWidget,
    QTextEdit, QComboBox, QProgressBar, QLabel,
    QHBoxLayout, QGroupBox, QLineEdit, QRubberBand,
    QApplication
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QRect
from PyQt6.QtGui import QTextCursor

from api_client import APIWorker
from audio_processor import AudioSystem
from ocr_analyzer import CodeAnalyzer


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        self.audio = AudioSystem()
        self.current_mode = "system"  # system/microphone/off
        self.api_worker = None
        self.selected_region = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setMouseTracking(True)
        self.origin = QPoint()
        self.setup_ui()
        self.setup_styles()
        self.setWindowTitle("AI Code Analyzer Pro")
        self.setMinimumSize(1000, 800)

    def setup_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setup_main_widgets()
        self.setup_tool_panel()
        self.setup_rubber_band()
        self.setup_layout()

    def setup_main_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        self.response_area = QTextEdit()
        self.response_area.setReadOnly(False)
        self.question_input = QLineEdit()
        self.question_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...")
        self.progress_bar = QProgressBar()
        self.status_label = QLabel("üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")

    def setup_tool_panel(self):
        """–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.tool_group = QGroupBox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

        # –í–∏–¥–∂–µ—Ç—ã
        self.api_selector = QComboBox()
        self.api_selector.addItems(["Cody" ,"DeepSeek", "OpenAI"])

        self.audio_mode = QComboBox()
        self.audio_mode.addItems(["–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω", "–í—ã–∫–ª—é—á–µ–Ω–æ"])
        self.audio_mode.setCurrentIndex(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫"

        self.btn_select_area = QPushButton("üñ±Ô∏è –í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å")
        self.btn_select_area.setCheckable(True)
        self.btn_analyze = QPushButton("üì∏ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
        self.btn_ask = QPushButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        self.btn_clear = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_audio_toggle = QPushButton("üé§ –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ")

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        tool_layout = QHBoxLayout()
        tool_layout.addWidget(QLabel("API:"))
        tool_layout.addWidget(self.api_selector)
        tool_layout.addWidget(QLabel("–†–µ–∂–∏–º:"))
        tool_layout.addWidget(self.audio_mode)
        tool_layout.addWidget(self.btn_select_area)
        tool_layout.addWidget(self.btn_analyze)
        tool_layout.addWidget(self.btn_ask)
        tool_layout.addWidget(self.btn_clear)
        tool_layout.addWidget(self.btn_audio_toggle)
        self.tool_group.setLayout(tool_layout)

        # –°–∏–≥–Ω–∞–ª—ã
        self.btn_select_area.clicked.connect(self.toggle_area_selection)
        self.btn_analyze.clicked.connect(self.analyze_code)
        self.btn_ask.clicked.connect(self.ask_question)
        self.btn_clear.clicked.connect(self.clear_output)
        self.btn_audio_toggle.clicked.connect(self.toggle_audio_analysis)
        self.audio_mode.currentIndexChanged.connect(self.change_audio_mode)
        self.question_input.returnPressed.connect(self.ask_question)

    def setup_rubber_band(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–∏–Ω–æ–≤–æ–π –ø–æ–ª–æ—Å—ã –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        self.rubber_band = QRubberBand(QRubberBand.Shape.Rectangle, self)
        self.rubber_band.setStyleSheet("""
            QRubberBand {
                border: 2px dashed #0078d7;
                background-color: rgba(0, 120, 215, 20%);
            }
        """)

    def setup_layout(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞"""
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.tool_group)
        main_layout.addWidget(self.response_area)
        main_layout.addWidget(self.question_input)
        main_layout.addWidget(self.progress_bar)
        main_layout.addWidget(self.status_label)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

    def setup_styles(self):
        """–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f7fa;
                font-family: 'Segoe UI', Arial;
            }
            QGroupBox {
                border: 1px solid #d1d5db;
                border-radius: 6px;
                margin-top: 10px;
                padding-top: 15px;
            }
            QTextEdit {
                background-color: white;
                border: 1px solid #d1d5db;
                border-radius: 6px;
                padding: 10px;
                font-family: 'Consolas';
            }
            QPushButton {
                padding: 8px 12px;
                border-radius: 6px;
                min-width: 100px;
                background-color: #e5e7eb;
            }
            QPushButton:hover {
                background-color: #d1d5db;
            }
            QProgressBar {
                height: 12px;
                border-radius: 6px;
            }
            QProgressBar::chunk {
                background-color: #3b82f6;
                border-radius: 6px;
            }
        """)

    # --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ ---
    def toggle_area_selection(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        self.setCursor(Qt.CursorShape.CrossCursor if checked else Qt.CursorShape.ArrowCursor)
        self.btn_select_area.setText("üö´ –û—Ç–º–µ–Ω–∏—Ç—å" if checked else "üñ±Ô∏è –í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å")

        if checked:
            self.rubber_band.show() if hasattr(self, 'origin') else self.rubber_band.hide()
        else:
            self.rubber_band.hide()

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        if self.btn_select_area.isChecked() and event.button() == Qt.MouseButton.LeftButton:
            self.origin = event.pos()  # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            self.rubber_band.setGeometry(QRect(self.origin, QSize()))
            self.rubber_band.show()
            event.accept()  # –Ø–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        if self.btn_select_area.isChecked() and self.rubber_band.isVisible():
            self.rubber_band.setGeometry(QRect(self.origin, event.pos()).normalized())
            event.accept()
        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        if self.btn_select_area.isChecked() and self.rubber_band.isVisible():
            rect = self.rubber_band.geometry()
            if rect.width() > 10 and rect.height() > 10:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞
                screen_rect = QRect(
                    self.mapToGlobal(rect.topLeft()),
                    self.mapToGlobal(rect.bottomRight())
                )
                self.selected_region = (
                    screen_rect.x(),
                    screen_rect.y(),
                    screen_rect.width(),
                    screen_rect.height()
                )
                self.status_label.setText(f"‚úÖ –û–±–ª–∞—Å—Ç—å: {rect.width()}x{rect.height()} –ø–∏–∫—Å.")

            self.rubber_band.hide()
            self.btn_select_area.setChecked(False)
            self.setCursor(Qt.CursorShape.ArrowCursor)
            event.accept()
        else:
            super().mouseReleaseEvent(event)

    # --- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
    def analyze_code(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        if not self.selected_region:
            self.status_label.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å!")
            return

        try:
            x, y, w, h = self.selected_region
            self.start_processing("üü° –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞...")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ OCR
            code_text = CodeAnalyzer.capture_and_analyze(region=(x, y, x + w, y + h))
            self.response_area.append(f"üîç –ö–æ–¥:\n```\n{code_text}\n```\n")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –ò–ò
            self.ask_ai(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:\n```\n{code_text}\n```")

        except Exception as e:
            self.handle_error(str(e))

    def ask_question(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        question = self.question_input.text().strip()
        if not question:
            return

        self.question_input.clear()
        self.start_processing("üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...")
        self.ask_ai(question)

    def ask_ai(self, prompt):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ò–ò"""
        self.api_worker = APIWorker(
            api_name=self.api_selector.currentText(),
            prompt=prompt
        )
        self.api_worker.finished.connect(self.handle_response)
        self.api_worker.error.connect(self.handle_error)
        self.api_worker.progress.connect(self.update_progress)
        self.api_worker.start()

    # --- –ê—É–¥–∏–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
    def change_audio_mode(self, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ (system/microphone/off)"""
        self.current_mode = ["system", "microphone", "off"][index]

    def toggle_audio_analysis(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞"""
        if self.btn_audio_toggle.text().startswith("üé§"):
            self.start_audio_listening()
            self.btn_audio_toggle.setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ")
            self.btn_audio_toggle.setStyleSheet("background-color: #ffcccc;")
        else:
            self.stop_audio_listening()
            self.btn_audio_toggle.setText("üé§ –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ")
            self.btn_audio_toggle.setStyleSheet("")

    def start_audio_listening(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            if self.current_mode == "system":
                self.audio.start_system_recording()
            elif self.current_mode == "microphone":
                self.audio.start_microphone_recording()
            self.status_label.setText("üü¢ –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            self.handle_error(str(e))

    def stop_audio_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏"""
        self.audio.stop_recording()
        self.status_label.setText("üî¥ –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    def start_processing(self, message):
        """–ù–∞—á–∞–ª–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(True)
        self.status_label.setText(message)

    def handle_response(self, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        self.response_area.append(f"ü§ñ –û—Ç–≤–µ—Ç:\n{response}\n{'=' * 50}\n")
        self.scroll_to_bottom()
        self.progress_bar.setVisible(False)
        self.status_label.setText("üü¢ –ì–æ—Ç–æ–≤–æ")

    def handle_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.response_area.append(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n")
        self.scroll_to_bottom()
        self.progress_bar.setVisible(False)
        self.status_label.setText("üî¥ –û—à–∏–±–∫–∞")

    def clear_output(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤—ã–≤–æ–¥–∞"""
        self.response_area.clear()
        self.status_label.setText("üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")

    def scroll_to_bottom(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞"""
        cursor = self.response_area.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.response_area.setTextCursor(cursor)

    def update_progress(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.progress_bar.setValue(value)
        if value < 30:
            self.status_label.setText("üü° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        elif value < 70:
            self.status_label.setText(f"üü° –ó–∞–ø—Ä–æ—Å –∫ {self.api_selector.currentText()}...")
        else:
            self.status_label.setText("üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...")

    def closeEvent(self, event):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞"""
        self.stop_audio_listening()
        if self.api_worker and self.api_worker.isRunning():
            self.api_worker.terminate()
        event.accept()
