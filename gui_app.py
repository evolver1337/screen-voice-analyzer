import logging

from PyQt6.QtCore import Qt, QRect, QSize
from PyQt6.QtGui import QTextCursor
from PyQt6.QtWidgets import (
    QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,
    QTextEdit, QPushButton, QComboBox, QProgressBar,
    QLabel, QGroupBox, QLineEdit, QListWidget, QRubberBand, QSizePolicy
)
from markdown import markdown
from markdown.extensions.codehilite import CodeHiliteExtension

from api_client import APIWorker, APIClient  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç API
from audio_manager import AudioManager
from history_manager import HistoryManager
from screenshot_manager import ScreenshotManager
from speech_recognizer import WhisperRecognizer
from text_formatter import TextFormatter, MarkdownHighlighter


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.whisper = WhisperRecognizer()
        self._init_managers()
        self.audio_manager.text_ready.connect(self._on_audio_text_ready)
        self._setup_ui()
        self._connect_signals()
        self._setup_styles()
        self._init_rubber_band()
        self.audio_manager.audio.audio_data_ready.connect(self._process_audio_data)
        self.whisper.text_recognized.connect(self._on_audio_text_ready)
        self.whisper.error_occurred.connect(self._handle_error)
        self.history = []
        logging.info("Application initialized")

    def _process_audio_data(self, audio_data):
        try:
            text = self.whisper.recognize_audio(audio_data)
            if text:
                self.whisper.text_recognized.emit(text)
        except Exception as e:
            self._handle_error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")

    def _init_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        self.api_client = APIClient()  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
        self.audio_manager = AudioManager()
        self.screenshot_manager = ScreenshotManager()
        self.text_formatter = TextFormatter()

        self.history_panel = QListWidget()
        self.history_manager = HistoryManager(self.history_panel)

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("AI Code Analyzer Pro")
        self.setMinimumSize(1000, 700)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_widget = QWidget()
        main_layout = QHBoxLayout(main_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(15)

        # –ü–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ (—Å–ª–µ–≤–∞)
        self._setup_history_panel()
        main_layout.addWidget(self.history_panel, stretch=1)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (—Å–ø—Ä–∞–≤–∞)
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        right_layout.setSpacing(10)

        # –í–∏–¥–∂–µ—Ç—ã
        self._setup_tool_panel()
        self._setup_text_areas()
        self._setup_status_bar()

        right_layout.addWidget(self.tool_group)
        right_layout.addWidget(self.response_area, stretch=3)
        right_layout.addWidget(self.question_input)
        right_layout.addWidget(self.progress_bar)
        right_layout.addWidget(self.status_label)

        main_layout.addWidget(right_panel, stretch=3)
        self.setCentralWidget(main_widget)

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ Markdown
        self.highlighter = MarkdownHighlighter(self.response_area.document())

    def _init_rubber_band(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–∏–Ω–æ–≤–æ–π –ø–æ–ª–æ—Å—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        self.rubber_band = QRubberBand(QRubberBand.Shape.Rectangle, self)
        self.rubber_band.setStyleSheet("""
            QRubberBand {
                border: 2px dashed #0078d7;
                background-color: rgba(0, 120, 215, 20%);
            }
        """)

    def _setup_history_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history_panel.setMinimumWidth(250)
        self.history_panel.setStyleSheet("""
            QListWidget {
                border: 1px solid #e1e4e8;
                border-radius: 4px;
                padding: 5px;
            }
            QListWidget::item {
                padding: 5px;
            }
        """)

    def _setup_tool_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –¥–≤—É–º—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏"""
        self.tool_group = QGroupBox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        main_layout = QVBoxLayout()
        main_layout.setSpacing(5)

        # –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        top_layout = QHBoxLayout()
        top_layout.setSpacing(10)

        self.btn_clear_history = QPushButton(" üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        self.btn_repeat_request = QPushButton(" üîÅ–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å")

        # –û–≥—Ä–∞–Ω–∏—á–∏–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –±—ã–ª–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ
        for btn in [self.btn_clear_history, self.btn_repeat_request]:
            btn.setMaximumWidth(140)
            btn.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)

        top_layout.addWidget(self.btn_clear_history)
        top_layout.addWidget(self.btn_repeat_request)
        top_layout.addStretch(1)  # –û—Ç–æ–¥–≤–∏–Ω–µ–º –∫–Ω–æ–ø–∫–∏ –≤–ª–µ–≤–æ

        # –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(10)

        self.api_selector = QComboBox()
        self.api_selector.addItems(["Cody", "OpenAI", "DeepSeek"])

        self.audio_mode = QComboBox()
        self.audio_mode.addItems(["–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫", "–í—ã–∫–ª—é—á–µ–Ω–æ"])

        self.btn_select_area = QPushButton("–í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å")
        self.btn_select_area.setCheckable(True)
        self.btn_analyze = QPushButton(" üì∏–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
        self.btn_clear = QPushButton("üßπ–û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_audio_toggle = QPushButton(" üé§–í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ")

        # –û–≥—Ä–∞–Ω–∏—á–∏–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫
        buttons = [
            self.btn_select_area,
            self.btn_analyze,
            self.btn_clear,
            self.btn_audio_toggle,
        ]
        for btn in buttons:
            btn.setMaximumWidth(130)
            btn.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)

        bottom_layout.addWidget(QLabel("API:"))
        bottom_layout.addWidget(self.api_selector)
        bottom_layout.addWidget(QLabel("–†–µ–∂–∏–º:"))
        bottom_layout.addWidget(self.audio_mode)
        bottom_layout.addWidget(self.btn_select_area)
        bottom_layout.addWidget(self.btn_analyze)
        bottom_layout.addWidget(self.btn_clear)
        bottom_layout.addWidget(self.btn_audio_toggle)
        bottom_layout.addStretch(1)

        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –ª—ç–π–∞—É—Ç
        main_layout.addLayout(top_layout)
        main_layout.addLayout(bottom_layout)

        self.tool_group.setLayout(main_layout)

    def _setup_text_areas(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        self.response_area = QTextEdit()
        self.response_area.setReadOnly(False)
        self.response_area.setAcceptRichText(True)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
        self.question_input = QLineEdit()
        self.question_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        self.question_input.setClearButtonEnabled(True)

    def _setup_status_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setVisible(False)

        self.status_label = QLabel("üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

    def _on_audio_text_ready(self, text):
        logging.info(f"Audio text received: {text}")
        self.response_area.append(f"<b>üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞—É–¥–∏–æ:</b><br>{text}<br>")

        # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
        self._start_processing("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ API...")
        self.api_client.send_request(
            api_name=self.api_selector.currentText(),
            prompt=text
        )

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        # –ö–Ω–æ–ø–∫–∏
        self.btn_select_area.clicked.connect(self._toggle_area_selection)
        self.btn_analyze.clicked.connect(self._analyze_code)
        self.btn_clear.clicked.connect(self._clear_output)
        self.btn_audio_toggle.clicked.connect(self._toggle_audio)

        self.btn_repeat_request.clicked.connect(self._repeat_request)
        self.btn_clear_history.clicked.connect(self._clear_history)

        # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        self.audio_mode.currentIndexChanged.connect(self._change_audio_mode)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.question_input.returnPressed.connect(self._ask_question)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.audio_manager.status_changed.connect(self._update_status)
        self.audio_manager.error_occurred.connect(self._handle_error)

        self.screenshot_manager.text_extracted.connect(self._handle_text_extracted)
        self.screenshot_manager.error_occurred.connect(self._handle_error)
        self.screenshot_manager.screenshot_taken.connect(self._handle_screenshot_taken)

        self.history_manager.item_requested.connect(self._load_history_item)

        # API –∫–ª–∏–µ–Ω—Ç
        self.api_client.response_received.connect(self._handle_api_response)
        self.api_client.error_occurred.connect(self._handle_error)
        self.api_client.progress_updated.connect(self._update_progress)

    def _clear_history(self):
        self.history_manager.clear_history()
        self._update_status("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞")

    def _repeat_request(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        item = self.history_panel.currentItem()
        if not item:
            return

        item_data = item.data(Qt.ItemDataRole.UserRole)
        question = item_data.get("prompt", "")
        if question:
            self.question_input.setText(question)
            self._send_prompt()
    def _send_prompt(self):
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ send_prompt, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏ –µ–≥–æ
        self._ask_question()

    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
            QMainWindow {
                background-color: #f8f9fa;
                font-family: 'Segoe UI', Arial;
            }

            /* –ì—Ä—É–ø–ø—ã */
            QGroupBox {
                border: 1px solid #dee2e6;
                border-radius: 6px;
                margin-top: 10px;
                padding-top: 15px;
                font-weight: bold;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }

            /* –ö–Ω–æ–ø–∫–∏ */
            QPushButton {
                padding: 6px 12px;
                border-radius: 4px;
                border: 1px solid #ced4da;
                background-color: #f8f9fa;
                min-width: 80px;
            }

            QPushButton:hover {
                background-color: #e2e6ea;
            }

            QPushButton:pressed {
                background-color: #dae0e5;
            }

            QPushButton:checked {
                background-color: #d1e7ff;
            }

            /* –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ */
            QComboBox {
                padding: 5px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                min-width: 100px;
            }

            /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è */
            QTextEdit, QLineEdit {
                border: 1px solid #ced4da;
                border-radius: 4px;
                padding: 8px;
                font-size: 14px;
                selection-background-color: #4CAF50;
            }

            /* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */
            QProgressBar {
                border: 1px solid #ced4da;
                border-radius: 4px;
                text-align: center;
                height: 20px;
            }

            QProgressBar::chunk {
                background-color: #4CAF50;
                width: 10px;
            }

            /* –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ */
            QListWidget {
                alternate-background-color: #f8f9fa;
            }

            QListWidget::item:hover {
                background-color: #e9ecef;
            }

            QListWidget::item:selected {
                background-color: #d1e7ff;
                color: #000;
            }
        """)

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        if self.btn_select_area.isChecked() and event.button() == Qt.MouseButton.LeftButton:
            self.origin = event.pos()
            self.rubber_band.setGeometry(QRect(self.origin, QSize()))
            self.rubber_band.show()
            event.accept()
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        if self.btn_select_area.isChecked() and self.rubber_band.isVisible():
            self.rubber_band.setGeometry(QRect(self.origin, event.pos()).normalized())
            event.accept()
        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        if self.btn_select_area.isChecked() and self.rubber_band.isVisible():
            rect = self.rubber_band.geometry()
            if rect.width() > 10 and rect.height() > 10:
                screen_rect = QRect(
                    self.mapToGlobal(rect.topLeft()),
                    self.mapToGlobal(rect.bottomRight())
                )
                self.selected_region = (
                    screen_rect.x(),
                    screen_rect.y(),
                    screen_rect.width(),
                    screen_rect.height()
                )
                self._update_status(f"‚úÖ –û–±–ª–∞—Å—Ç—å: {rect.width()}x{rect.height()} –ø–∏–∫—Å.")

            self.rubber_band.hide()
            self.btn_select_area.setChecked(False)
            self.setCursor(Qt.CursorShape.ArrowCursor)
            event.accept()
        else:
            super().mouseReleaseEvent(event)

    def _toggle_area_selection(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏"""
        self.setCursor(Qt.CursorShape.CrossCursor if checked else Qt.CursorShape.ArrowCursor)
        self.btn_select_area.setText("üö´ –û—Ç–º–µ–Ω–∏—Ç—å" if checked else "üñ±Ô∏è –í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å")

    def _analyze_code(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        if not hasattr(self, 'selected_region') or not self.selected_region:
            self._handle_error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞")
            return

        self._start_processing("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞...")
        self.screenshot_manager.set_region(self.selected_region)
        self.screenshot_manager.capture_and_analyze()

    def _ask_question(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑"""
        question = self.question_input.text().strip()
        if not question:
            return

        self._start_processing("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        self.question_input.setProperty("last_question", question)
        self.question_input.clear()

        # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
        self.api_client.send_request(
            api_name=self.api_selector.currentText(),
            prompt=question
        )

    def _toggle_audio(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ"""
        self.audio_manager.toggle_recording()
        self.btn_audio_toggle.setText(
            "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if self.audio_manager.is_recording
            else "üé§ –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ"
        )

    def _change_audio_mode(self, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ"""
        self.audio_manager.set_mode(index)

    def _clear_output(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–≤–æ–¥–∞"""
        self.response_area.clear()
        self._update_status("–ì–æ—Ç–æ–≤–æ")

    def _start_processing(self, message):
        """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(True)
        self._update_status(message)

    def _finish_processing(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.progress_bar.setVisible(False)
        self._update_status("–ì–æ—Ç–æ–≤–æ")

    def _update_progress(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setValue(value)

    def _update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.setText(message)

    def _handle_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        self.response_area.append(self.text_formatter.format_error(error))
        self._finish_processing()
        logging.error(error)

    def _handle_text_extracted(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.response_area.append(self.text_formatter.format_code(text))
        self.ask_ai(text)

    def _handle_screenshot_taken(self, pixmap):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å)"""
        pass

    def _handle_api_response(self, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            question = self.question_input.property("last_question")
            self.history_manager.add_item(question, response)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
            html = markdown(
                response,
                extensions=[
                    'fenced_code',
                    CodeHiliteExtension(linenums=False, guess_lang=True, noclasses=True)
                ]
            )
            self.response_area.setHtml(html)
            self._finish_processing()

        except Exception as e:
            self._handle_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

    def ask_question(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        question = self.question_input.text().strip()
        if not question:
            return

        self.question_input.clear()
        self.start_processing("üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...")
        self.ask_ai(question)

    def ask_ai(self, prompt):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ò–ò"""
        self.api_worker = APIWorker(
            api_name=self.api_selector.currentText(),
            prompt=prompt
        )
        self.api_worker.finished.connect(self.handle_response)
        self.api_worker.error.connect(self.handle_error)
        self.api_worker.progress.connect(self.update_progress)
        self.api_worker.start()

    def _load_history_item(self, item_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.response_area.clear()
        question = item_data.get("prompt", "")
        response = item_data.get("response", "")

        self.response_area.append(
            self.text_formatter.format_text(f"üí¨ –í–æ–ø—Ä–æ—Å: {question}")
        )
        self.response_area.append(
            self.text_formatter.format_text(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
        )

        # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    def start_processing(self, message):
        """–ù–∞—á–∞–ª–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(True)
        self.status_label.setText(message)

    def handle_response(self, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        logging.info(response)
        self.response_area.append(f"ü§ñ –û—Ç–≤–µ—Ç:\n{response}\n{'=' * 50}\n")
        self.scroll_to_bottom()
        self.progress_bar.setVisible(False)
        self.status_label.setText("üü¢ –ì–æ—Ç–æ–≤–æ")

    def handle_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.response_area.append(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n")
        self.scroll_to_bottom()
        self.progress_bar.setVisible(False)
        self.status_label.setText("üî¥ –û—à–∏–±–∫–∞")

    def clear_output(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤—ã–≤–æ–¥–∞"""
        self.response_area.clear()
        self.status_label.setText("üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")

    def scroll_to_bottom(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞"""
        cursor = self.response_area.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.response_area.setTextCursor(cursor)

    def update_progress(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.progress_bar.setValue(value)
        if value < 30:
            self.status_label.setText("üü° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        elif value < 70:
            self.status_label.setText(f"üü° –ó–∞–ø—Ä–æ—Å –∫ {self.api_selector.currentText()}...")
        else:
            self.status_label.setText("üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.audio_manager.cleanup()
        self.screenshot_manager.cleanup()
        self.history_manager.cleanup()
        self.api_client.cancel_current()
        logging.info("Application closed")
        super().closeEvent(event)
