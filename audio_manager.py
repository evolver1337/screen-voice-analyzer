import logging
from PyQt6.QtCore import QObject, pyqtSignal  # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å

from audio_processor import AudioSystem


class AudioManager(QObject):
    status_changed = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.audio = AudioSystem()
        self.current_mode = "system"
        self.is_recording = False

    def set_mode(self, mode_index):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (0-system, 1-microphone, 2-off)"""
        modes = ["system", "microphone", "off"]
        self.current_mode = modes[mode_index]
        logging.info(f"Audio mode changed to: {self.current_mode}")

    def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.stop()
        else:
            self.start()

    def start(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏"""
        try:
            if self.current_mode == "system":
                self.audio.start_recording()
            else:
                return

            self.is_recording = True
            self.status_changed.emit("üü¢ –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω")
            logging.info("Audio recording started")

        except Exception as e:
            self.error_occurred.emit(str(e))
            logging.error(f"Audio start error: {e}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        self.audio.stop_recording()
        self.is_recording = False
        self.status_changed.emit("üî¥ –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logging.info("Audio recording stopped")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.is_recording:
            self.stop()
        logging.info("Audio manager cleaned up")